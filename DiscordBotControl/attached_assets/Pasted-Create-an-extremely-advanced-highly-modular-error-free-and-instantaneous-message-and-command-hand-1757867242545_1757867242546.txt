Create an extremely advanced, highly modular, error-free, and instantaneous-message-and-command-handling subsystem for a Discord bot in Python. The bot must use only slash commands (discord.py v2+ or equivalent) in its bot.py and should be architected to handle a near-unlimited number of commands and cogs metaphorically, ensuring future scalability. The system should include:
	1.	Command & Cog System:
	•	Full support for all types of commands: slash commands, hybrid commands, context menu commands, and subcommands.
	•	Dynamic loading, unloading, and reloading of cogs without restarting the bot.
	•	Auto-registration of commands on startup with error handling for duplicates and conflicts.
	•	Cog-based permissions system allowing per-cog and per-command role restrictions.
	•	Modular, human-readable, and highly maintainable code structure.
	2.	Administrator Tools:
	•	Include 40+ unique, fully functional admin commands including but not limited to:
	•	echo (with optional reply to a specific message)
	•	reload_all_cogs, ban, kick, purge, stats, backup, broadcast, eval, shutdown, restart, log_channel_set, config_view, config_edit, user_info, server_info, embed_creator, reaction_roles, mute, unmute, warn, clear_warnings, role_create, role_delete, role_assign, role_remove, pin, unpin, temp_ban, temp_mute, command_list, cog_list, invite_link, server_backup, command_stats, message_stats, toggle_command, toggle_cog
	•	New slash commands: /server_icon to retrieve the server’s icon and /avatar_icon to retrieve any user’s avatar.
	3.	Configuration & Customization:
	•	Bot should be extremely easy to configure via a single JSON/YAML config file or environment variables.
	•	Main color palette is strictly primary #ba4628 and secondary #56f87b for embeds, messages, and decorative console logs.
	•	Dynamic theme application on embeds and logs depending on context.
	4.	Performance & Dependencies:
	•	Optimized, non-blocking code using asyncio.
	•	Include all relevant modern Python packages in requirements.txt, strictly Python 3.12 compatible, fully up-to-date, including but not limited to: discord.py, aiohttp, asyncio, python-dotenv, loguru, psutil, pytz, numpy, pandas (if needed for stats), colorama, Pillow, and any other packages that enhance bot functionality and admin utilities.
	•	Automatic error catching, logging to a separate log channel, and local file fallback.
	•	Optional local caching or database support for fast retrieval of user settings, stats, and configuration.
	5.	Command Handling & Features:
	•	Instantaneous command response with minimal latency.
	•	Comprehensive error messages with suggestions to correct usage.
	•	Optional ephemeral replies for sensitive commands.
	•	Full emoji, attachment, and embed handling across all commands.
	•	Support for bulk commands like mass messaging (with permission checks) and mass role updates.
	6.	Extras & Scalability:
	•	Fully prepared for future expansions: multiple bots, distributed systems, or additional command modules.
	•	Include template for AI or moderation integration if needed.
	•	Easy integration for external APIs and webhooks.
	•	Include placeholder directories for cogs/, utils/, config/, data/, logs/.
	7.	Port Configuration:
	•	The bot must run on port 3001. Ensure all hosting, web servers, and webhook endpoints default to this port.
	8.	Output Requirements:
	•	Provide clean, human-readable, professional Python code.
	•	Ensure all functions, classes, and methods follow modern Python standards and type hints.
	•	Include ready-to-run bot.py and requirements.txt files.
	•	Include minimal starter cogs demonstrating all features, including /server_icon and /avatar_icon, fully documented inline only where absolutely necessary.